import tensorflow as tf
from tensorflow.keras.layers import Dense, Flatten
from tensorflow.keras.models import Sequential
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.utils import multi_gpu_model

# Check if GPUs are available
gpus = tf.config.experimental.list_physical_devices('GPU')
if gpus:
    print('GPUs available:', gpus)
else:
    print('No GPUs available. Please check your TensorFlow installation.')

# Create a simple neural network model
model = Sequential([
    Flatten(input_shape=(28, 28)),
    Dense(128, activation='relu'),
    Dense(64, activation='relu'),
    Dense(10, activation='softmax')
])

# Compile the model
opt = Adam(learning_rate=1e-3)
model.compile(loss='sparse_categorical_crossentropy', optimizer=opt, metrics=['accuracy'])

# Load dataset (MNIST as an example)
mnist = tf.keras.datasets.mnist
(x_train, y_train), (x_test, y_test) = mnist.load_data()
x_train, x_test = x_train / 255.0, x_test / 255.0

# Train the model on multiple GPUs
if len(gpus) > 1:
    model = multi_gpu_model(model, gpus=len(gpus))
print('Using', len(gpus), 'GPUs for training.')

model.fit(x_train, y_train, epochs=5, batch_size=64, validation_data=(x_test, y_test))

# Convert the model to be used for inference
model = tf.keras.models.clone_model(model)
model.set_weights(model.get_weights())
