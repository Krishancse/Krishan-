import tensorflow as tf
from tensorflow.keras.layers import Layer

class CustomGpuLayer(Layer):
    def __init__(self):
        super(CustomGpuLayer, self).__init__()

    def build(self, input_shape):
        super(CustomGpuLayer, self).build(input_shape)

    @tf.function
    def call(self, inputs):
        with tf.device('/GPU:0'):  # Specify the GPU to use
            return inputs * 2.0

# Create a simple neural network model with the custom GPU-accelerated layer
model = tf.keras.Sequential([
    CustomGpuLayer(),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(10, activation='softmax')
])

# Compile the model
opt = tf.keras.optimizers.Adam(learning_rate=1e-3)
model.compile(loss='sparse_categorical_crossentropy', optimizer=opt, metrics=['accuracy'])

# Load dataset (MNIST as an example)
mnist = tf.keras.datasets.mnist
(x_train, y_train), (x_test, y_test) = mnist.load_data()
x_train, x_test = x_train / 255.0, x_test / 255.0

# Train the model
model.fit(x_train, y_train, epochs=5, batch_size=64, validation_data=(x_test, y_test))

# Convert the model to be used for inference
model = tf.keras.models.clone_model(model)
model.set_weights(model.get_weights())
